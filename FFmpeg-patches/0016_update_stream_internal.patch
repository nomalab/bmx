diff --git a/libavformat/audiointerleave.c b/libavformat/audiointerleave.c
index 2e83031bd6..7d4fc445c1 100644
--- a/libavformat/audiointerleave.c
+++ b/libavformat/audiointerleave.c
@@ -104,13 +104,13 @@ static int interleave_new_audio_packet(AVFormatContext *s, AVPacket *pkt,
     return pkt->size;
 }
 
-int ff_audio_rechunk_interleave(AVFormatContext *s, AVPacket *out, AVPacket *pkt, int flush,
-                        int (*get_packet)(AVFormatContext *, AVPacket *, AVPacket *, int),
+int ff_audio_rechunk_interleave(AVFormatContext *s, AVPacket *pkt, int flush, int has_packet,
+                        int (*get_packet)(AVFormatContext *, AVPacket *, int),
                         int (*compare_ts)(AVFormatContext *, const AVPacket *, const AVPacket *))
 {
     int i, ret;
 
-    if (pkt) {
+    if (has_packet) {
         AVStream *st = s->streams[pkt->stream_index];
         AudioInterleaveContext *aic = st->priv_data;
         if (st->codecpar->codec_type == AVMEDIA_TYPE_AUDIO) {
@@ -128,7 +128,6 @@ int ff_audio_rechunk_interleave(AVFormatContext *s, AVPacket *out, AVPacket *pkt
             if ((ret = ff_interleave_add_packet(s, pkt, compare_ts)) < 0)
                 return ret;
         }
-        pkt = NULL;
     }
 
     for (i = 0; i < s->nb_streams; i++) {
@@ -144,5 +143,5 @@ int ff_audio_rechunk_interleave(AVFormatContext *s, AVPacket *out, AVPacket *pkt
         }
     }
 
-    return get_packet(s, out, NULL, flush);
+    return get_packet(s, pkt, flush);
 }
diff --git a/libavformat/audiointerleave.h b/libavformat/audiointerleave.h
index 0933310f4c..1151298499 100644
--- a/libavformat/audiointerleave.h
+++ b/libavformat/audiointerleave.h
@@ -49,8 +49,8 @@ void ff_audio_interleave_close(AVFormatContext *s);
  * @param get_packet function will output a packet when streams are correctly interleaved.
  * @param compare_ts function will compare AVPackets and decide interleaving order.
  */
-int ff_audio_rechunk_interleave(AVFormatContext *s, AVPacket *out, AVPacket *pkt, int flush,
-                        int (*get_packet)(AVFormatContext *, AVPacket *, AVPacket *, int),
+int ff_audio_rechunk_interleave(AVFormatContext *s, AVPacket *pkt, int flush, int has_packet,
+                        int (*get_packet)(AVFormatContext *, AVPacket *, int),
                         int (*compare_ts)(AVFormatContext *, const AVPacket *, const AVPacket *));
 
 #endif /* AVFORMAT_AUDIOINTERLEAVE_H */
diff --git a/libavformat/bmxenc.c b/libavformat/bmxenc.c
index 01932f5edd..fba82d1485 100644
--- a/libavformat/bmxenc.c
+++ b/libavformat/bmxenc.c
@@ -64,6 +64,7 @@ static int bmx_write_header(AVFormatContext *s)
     for (int i = 0; i < s->nb_streams; ++i)
     {
         AVStream* st = s->streams[i];
+        FFStream* sti = ffstream(st);
         BMXStreamContext* sc = av_mallocz(sizeof(BMXStreamContext));
         st->priv_data = sc;
 
@@ -152,7 +153,7 @@ static int bmx_write_header(AVFormatContext *s)
                     av_log(s, AV_LOG_INFO, "Set AVCI header for stream %d\n", i);
                 }
                 if (bmx->clip_type == CLIP_TYPE_D10) {
-                    bmx_set_aspect_ratio(bmx->internal_data, i, st->internal->display_aspect_ratio.num, st->internal->display_aspect_ratio.den);
+                    bmx_set_aspect_ratio(bmx->internal_data, i, sti->display_aspect_ratio.num, sti->display_aspect_ratio.den);
                 }
             }
         }
@@ -167,31 +168,35 @@ static int bmx_write_header(AVFormatContext *s)
     return 0;
 }
 
-static int bmx_interleave_get_packet(AVFormatContext *s, AVPacket *out, AVPacket *pkt, int flush)
+static int bmx_interleave_get_packet(AVFormatContext *s, AVPacket *out, int flush)
 {
+    FFFormatContext* si = ffformatcontext(s);
     int i, stream_count = 0;
 
     for (i = 0; i < s->nb_streams; i++)
-        stream_count += !!s->streams[i]->internal->last_in_packet_buffer;
+        stream_count += !!ffstream(s->streams[i])->last_in_packet_buffer;
 
     if (stream_count && (s->nb_streams == stream_count || flush)) {
-        PacketList *pktl = s->internal->packet_buffer;
+        PacketListEntry *pktl = si->packet_buffer.head;
         if (s->nb_streams != stream_count) {
-            PacketList *last = NULL;
+            PacketListEntry *last = NULL;
             // find last packet in edit unit
             while (pktl) {
                 if (!stream_count || pktl->pkt.stream_index == 0)
                     break;
+                // update last packet in packet buffer
+                if (ffstream(s->streams[pktl->pkt.stream_index])->last_in_packet_buffer != pktl)
+                    ffstream(s->streams[pktl->pkt.stream_index])->last_in_packet_buffer = pktl;
                 last = pktl;
                 pktl = pktl->next;
                 stream_count--;
             }
             // purge packet queue
             while (pktl) {
-                PacketList *next = pktl->next;
+                PacketListEntry *next = pktl->next;
 
-                if(s->streams[pktl->pkt.stream_index]->internal->last_in_packet_buffer == pktl)
-                    s->streams[pktl->pkt.stream_index]->internal->last_in_packet_buffer= NULL;
+                if (ffstream(s->streams[pktl->pkt.stream_index])->last_in_packet_buffer == pktl)
+                    ffstream(s->streams[pktl->pkt.stream_index])->last_in_packet_buffer = NULL;
                 av_packet_unref(&pktl->pkt);
                 av_freep(&pktl);
                 pktl = next;
@@ -199,21 +204,17 @@ static int bmx_interleave_get_packet(AVFormatContext *s, AVPacket *out, AVPacket
             if (last)
                 last->next = NULL;
             else {
-                s->internal->packet_buffer = NULL;
-                s->internal->packet_buffer_end= NULL;
+                si->packet_buffer.head = NULL;
+                si->packet_buffer.tail = NULL;
                 goto out;
             }
-            pktl = s->internal->packet_buffer;
+            pktl = si->packet_buffer.head;
         }
 
-        *out = pktl->pkt;
-        av_log(s, AV_LOG_TRACE, "out st:%d dts:%"PRId64"\n", (*out).stream_index, (*out).dts);
-        s->internal->packet_buffer = pktl->next;
-        if(s->streams[pktl->pkt.stream_index]->internal->last_in_packet_buffer == pktl)
-            s->streams[pktl->pkt.stream_index]->internal->last_in_packet_buffer= NULL;
-        if(!s->internal->packet_buffer)
-            s->internal->packet_buffer_end= NULL;
-        av_freep(&pktl);
+        if (ffstream(s->streams[pktl->pkt.stream_index])->last_in_packet_buffer == pktl)
+            ffstream(s->streams[pktl->pkt.stream_index])->last_in_packet_buffer = NULL;
+        avpriv_packet_list_get(&si->packet_buffer, out);
+        av_log(s, AV_LOG_TRACE, "out st:%d dts:%"PRId64"\n", out->stream_index, out->dts);
         return 1;
     } else {
     out:
@@ -230,9 +231,9 @@ static int bmx_compare_timestamps(AVFormatContext *s, AVPacket *next, AVPacket *
         (next->dts == pkt->dts && sc->order < sc2->order);
 }
 
-static int bmx_interleave(AVFormatContext *s, AVPacket *out, AVPacket *pkt, int flush)
+static int bmx_interleave(AVFormatContext *s, AVPacket *pkt, int flush, int has_packet)
 {
-    return ff_audio_rechunk_interleave(s, out, pkt, flush,
+    return ff_audio_rechunk_interleave(s, pkt, flush, has_packet,
                                bmx_interleave_get_packet, bmx_compare_timestamps);
 }
 
